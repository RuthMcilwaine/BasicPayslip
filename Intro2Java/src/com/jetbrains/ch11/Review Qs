ch11.Inheritance
#11.1
public class main {
    public main() {
        System.out.println("A's no-arg constructor is invoked");
    }
}
class B extends main {
}
public class C {
    public static void main(String[] args) {

        B b = new B();
    }
}
(a) output : A's no-arg constructor is invoked
(b) expecting an int argument

#11.2 True or False?
1. A subclass is a subset of a superclass. T
2. When invoking a constructor from a subclass, its superclass's no-arg constructor is always invoked.T
(If a subclass's constructor explicitly invoke a superclass's constructor, the superclass's no-arg constructor is not invoked.)

3. You can override a private method defined in a superclass. F
4. You can override a static method defined in a superclass. F

#11.3 Identify the problems in the following classes.
can't use getArea() inside method because it overrides the super getArea() method. use keyword super when calling methods in class B. this.radius missing and this.length missing.

#11.4 How do you explicitly invoke a superclass constructor from a subclass?
using the keyword super();  inside the constructor.

#11.5 How do you invoke an overridden superclass method from a subclass?
using super.method()

#11.6 Explain the difference between method overloading and method overriding.
Method overloading allows a class to have more than one method with the same name and the arguments are different.
Method overriding modifies the methods that are defined in the superclasses.

#11.7 If a method in a subclass has the same signature as a method in its superclass with the same return type, is the method overridden or overloaded?
overriden.

#11.8 If a method in a subclass has the same signature as a method in its superclass with the different return type, will this be a problem?
return type has to be the same.

#11.9 If a method in a subclass has the same name as a method in its superclass with different parameter types, is the method overridden or overloaded?
overloading.
